#----------------------------------------------------------------------
#
# This file sets the user's system-dependant settings:
#   1) Copy this file to .cshrc.myCode (so it doesn't get
#      overwritten the next time you pull from the repo!)
#   2) Add your own system to the list
#   3) Place it in the directory pointed to by $GBP_SRC on your system
#   3) Source it in your .cshrc, after setting $GBP_SRC
#        eg. place the following lines in your .cshrc
#              > setenv GBP_SRC  ${HOME}'/gbpCode/' 
#              > source ${GBP_SRC}/.cshrc.myCode
#
# See the INSTALL file in this directory for more information.
#
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# Defaults (illustrating the set of environment variables that need to
#           be set in this file; we're assuming GBP_SRC is already set
#           before this file gets sourced)
#----------------------------------------------------------------------
if (!($?GBP_QUEUE_TYPE)) then
   setenv GBP_QUEUE_TYPE SERIAL
endif

# If any of the following 'USE' flags are set to 1, you must
#   then set the corresponding GBP_XXX_DIR variable below
setenv USE_GSL           1
setenv USE_FFTW          0
setenv USE_MPI           0
setenv USE_VALGRIND      0
setenv USE_CFITSIO       0
setenv USE_SPRNG         0
setenv USE_HDF5          0
setenv USE_GADGET        0
setenv USE_GDLIB         0

# Set this to 1 if you need to link-in the Intel math library.  If you are
#   getting errors like 'feupdateenv is not implemented and will always fail'
#   then you need to do this.
setenv USE_INTEL_MATH 0

# Directories for each of the USE_ flags set to '1' above.  You don't need to do
#   this if the library is loaded as a module, since the appropriate paths are
#   already set automatically in the environment variables.
#setenv GBP_GSL_DIR       ${HOME}/3rd_Party/
#setenv GBP_MPI           ${HOME}/3rd_Party/openmpi
#setenv GBP_VALGRIND_DIR  ${HOME}/3rd_Party/valgrind/
#setenv GBP_FFTW_DIR      ${HOME}/3rd_Party/
#setenv GBP_SPRNG_DIR     ${HOME}/3rd_Party/
#setenv GBP_CFITSIO_DIR   ${HOME}/3rd_Party/
#setenv GBP_HDF5_DIR      ${HOME}/3rd_Party/
#setenv GBP_GDLIB_DIR     ${HOME}/3rd_Party/

# This is where the compiled gbpCode libraries, etc will be stored
setenv GBP_LIB ${GBP_SRC}'myLib/'
setenv GBP_INC ${GBP_SRC}'myInclude/'
setenv GBP_BIN ${GBP_SRC}'myBin/'
setenv GBP_DAT ${GBP_SRC}'myData/'

# Old versions of Mac OSX don't have getline() so we may need to 
#   compile our own version on that platform
setenv USE_GETLINE 0

#======================================================================
# SET SOME SYSTEM-SPECIFIC THINGS HERE
# eg. If you're gonna use valgrind with this code, you have to supply 
#     your system's platform here.
#======================================================================
# If you're gonna use valgrind with this code, you have to supply your
#  system's platform here.
setenv GBP_VALGRIND_PLAT x86-darwin

# Set a default for the GBP_MPI path
if (!($?GBP_MPI)) then
  if (($?MPI_DIR)) then
     setenv GBP_MPI $MPI_DIR
  else
     setenv GBP_MPI ''
  endif
endif

#----------------------------------------------------------------------
# Swinburne cluster
#----------------------------------------------------------------------
if ($HOSTTYPE == 'x86_64-linux') then
  setenv GBP_VALGRIND_PLAT amd64-linux
else if ($HOSTTYPE == 'intel-mac') then
  setenv GBP_VALGRIND_PLAT x86-darwin
  setenv USE_GETLINE 0
else
  echo 'Unsupported HOSTTYPE in .cshrc.gbpCode. Default behavior being used.'
endif

#----------------------------------------------------------------------
# The rest of this file should generally be left untouched
#----------------------------------------------------------------------

# Add to the library path
if ($?LD_LIBRARY_PATH) then
  setenv LD_LIBRARY_PATH ${GBP_LIB}/cuda/:${LD_LIBRARY_PATH}
else
  setenv LD_LIBRARY_PATH ${GBP_LIB}
endif

# Add to the path
if ($?PATH) then
  setenv PATH ${PATH}:${GBP_BIN}
else
  setenv LD_LIBRARY_PATH ${GBP_BIN}
endif

